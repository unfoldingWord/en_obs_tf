# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Build Markdown Exports

on:
  # Runs on an event fired by a Door43 webhook
  repository_dispatch:
    types: [build-obs-tf-web]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Transform mardown for exports and jekyll transformations
  preprocess-markdown:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.EN_OBS_TF_TOKEN }}
          path: ./obs_tf_web
      - name: Install yq
        run: |
          sudo add-apt-repository ppa:rmescandon/yq
          sudo apt update
          sudo apt install yq -y
      - name: Install LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-xetex
      - name: Install pandoc
        run: |
          wget https://github.com/jgm/pandoc/releases/download/3.1.2/pandoc-3.1.2-1-amd64.deb
          sudo dpkg -i pandoc-3.1.2-1-amd64.deb
          pandoc -v
      - name: Fetch Markdown Files
        run: |
          sudo git clone https://git.door43.org/unfoldingWord/en_obs_tf.git ./obs_source
          ls
      - name: Transform Markdown for Web and Push
        run: |
          sudo git config --global user.name 'github-actions[bot]'
          sudo git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          sudo yq e -i '.variables.transclusions-directory-path = "./obs_source/transclusions"' ./obs_source/exportScripts/defaults/export.md.yaml
          sudo mkdir -p ./obs_source/transformed_md
          sudo cp ./obs_source/*.md ./obs_source/transformed_md

          for file in ./obs_source/transformed_md/*.md; do
            echo "Fixing hashes in $file"
            sudo sed -i 's/#########/#####/g' $file
            sudo sed -i 's/\\\\images/.\\\\assets\\\\images/g' $file
            sudo sed -n '/---/,/---/p' $file > ${file%.md}.meta.md
          done

          for file in ./obs_source/transformed_md/*.md; do
            echo "Processing $file"
            sudo pandoc --defaults ./obs_source/exportScripts/defaults/export.md.yaml --lua-filter=./obs_source/exportScripts/lua-filters/obs.filter.md.lua "$file" -o "${file%.md}.transformed.md"
          done

          ls

          sudo cp ./obs_source/transformed_md/*.transformed.md ./obs_tf_web/transformed_md
          cd ./obs_tf_web/transformed_md
          if [[ -n $(git status --porcelain) ]]; then
            sudo git add -A
            sudo git commit -m "Automated commit by GitHub Actions"
            sudo git push
            echo "Changes committed and pushed successfully!"
          else
            echo "No transform md changes to commit."
          fi
      - name: Generate Exports
        run: |
          sudo yq e -i '.variables.hide-observation-answers = false' ./obs_source/exportScripts/defaults/export.docx.yaml
          sudo yq e -i '.variables.hide-discourse-answers = false' ./obs_source/exportScripts/defaults/export.docx.yaml
          sudo yq e -i '.variables.use-brief-draft-and-checking-sections = false' ./obs_source/exportScripts/defaults/export.docx.yaml
          sudo yq e -i '.variables.replace-movements_4_5_and_conclusion_with_reference = false' ./obs_source/exportScripts/defaults/export.docx.yaml
          sudo yq e -i '.variables.show-story-section = true' ./obs_source/exportScripts/defaults/export.docx.yaml
          sudo yq e -i '.variables.image-base-path = "./obs_source/images"' ./obs_source/exportScripts/defaults/export.docx.yaml
          sudo yq e -i '.variables.transclusions-directory-path = "./obs_source/transclusions"' ./obs_source/exportScripts/defaults/export.docx.yaml

          sudo yq e -i '.variables.hide-observation-answers = false' ./obs_source/exportScripts/defaults/export.odt.yaml
          sudo yq e -i '.variables.hide-discourse-answers = false' ./obs_source/exportScripts/defaults/export.odt.yaml
          sudo yq e -i '.variables.use-brief-draft-and-checking-sections = false' ./obs_source/exportScripts/defaults/export.odt.yaml
          sudo yq e -i '.variables.replace-movements_4_5_and_conclusion_with_reference = false' ./obs_source/exportScripts/defaults/export.odt.yaml
          sudo yq e -i '.variables.show-story-section = true' ./obs_source/exportScripts/defaults/export.odt.yaml
          sudo yq e -i '.variables.image-base-path = "./obs_source/images"' ./obs_source/exportScripts/defaults/export.odt.yaml
          sudo yq e -i '.variables.transclusions-directory-path = "./obs_source/transclusions"' ./obs_source/exportScripts/defaults/export.odt.yaml

          sudo yq e -i '.variables.hide-observation-answers = false' ./obs_source/exportScripts/defaults/export.pdf.yaml
          sudo yq e -i '.variables.hide-discourse-answers = false' ./obs_source/exportScripts/defaults/export.pdf.yaml
          sudo yq e -i '.variables.use-brief-draft-and-checking-sections = false' ./obs_source/exportScripts/defaults/export.pdf.yaml
          sudo yq e -i '.variables.replace-movements_4_5_and_conclusion_with_reference = false' ./obs_source/exportScripts/defaults/export.pdf.yaml
          sudo yq e -i '.variables.show-story-section = true' ./obs_source/exportScripts/defaults/export.pdf.yaml
          sudo yq e -i '.variables.image-base-path = "./obs_source/images"' ./obs_source/exportScripts/defaults/export.pdf.yaml
          sudo yq e -i '.variables.transclusions-directory-path = "./obs_source/transclusions"' ./obs_source/exportScripts/defaults/export.pdf.yaml

          sudo yq e -i '.variables.hide-observation-answers = false' ./obs_source/exportScripts/defaults/export.epub.yaml
          sudo yq e -i '.variables.hide-discourse-answers = false' ./obs_source/exportScripts/defaults/export.epub.yaml
          sudo yq e -i '.variables.use-brief-draft-and-checking-sections = false' ./obs_source/exportScripts/defaults/export.epub.yaml
          sudo yq e -i '.variables.replace-movements_4_5_and_conclusion_with_reference = false' ./obs_source/exportScripts/defaults/export.epub.yaml
          sudo yq e -i '.variables.show-story-section = true' ./obs_source/exportScripts/defaults/export.epub.yaml
          sudo yq e -i '.variables.image-base-path = "./obs_source/images"' ./obs_source/exportScripts/defaults/export.epub.yaml
          sudo yq e -i '.variables.transclusions-directory-path = "./obs_source/transclusions"' ./obs_source/exportScripts/defaults/export.epub.yaml

          for file in ./obs_source/*.md; do
            echo "Processing $file"
            sudo pandoc --defaults ./obs_source/exportScripts/defaults/export.docx.yaml --lua-filter=./obs_source/exportScripts/lua-filters/obs.filter.docx.lua --reference-doc=./obs_source/exportScripts/reference-docs/obs_style_template.docx "$file" -o "${file%.md}.docx"
            sudo pandoc --defaults ./obs_source/exportScripts/defaults/export.odt.yaml --lua-filter=./obs_source/exportScripts/lua-filters/obs.filter.odt.lua --reference-doc=./obs_source/exportScripts/reference-docs/obs_style_template.odt "$file" -o "${file%.md}.odt"
            sudo pandoc --defaults ./obs_source/exportScripts/defaults/export.pdf.yaml --lua-filter=./obs_source/exportScripts/lua-filters/obs.filter.pdf.lua "$file" -o "${file%.md}.pdf"
            sudo pandoc --defaults ./obs_source/exportScripts/defaults/export.epub.yaml --lua-filter=./obs_source/exportScripts/lua-filters/obs.filter.epub.lua "$file" -o "${file%.md}.epub"
          done

          sudo cp ./obs_source/*.docx ./obs_tf_web/exports/docx
          sudo cp ./obs_source/*.pdf ./obs_tf_web/exports/pdf
          sudo cp ./obs_source/*.odt ./obs_tf_web/exports/odt
          sudo cp ./obs_source/*.epub ./obs_tf_web/exports/epub

      - name: Push Exports
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

          ls
          cd ./obs_tf_web/exports/docx
          if [[ -n $(git status --porcelain) ]]; then
            sudo git add -A
            sudo git commit -m "Automated commit by GitHub Actions"
            sudo git push
            echo "Changes committed and pushed successfully!"
          else
            echo "No docx changes to commit."
          fi

          cd ../../exports/odt
          if [[ -n $(git status --porcelain) ]]; then
            sudo git add -A
            sudo git commit -m "Automated commit by GitHub Actions"
            sudo git push
            echo "Changes committed and pushed successfully!"
          else
            echo "No odt changes to commit."
          fi

          cd ../../exports/pdf
          if [[ -n $(git status --porcelain) ]]; then
            sudo git add -A
            sudo git commit -m "Automated commit by GitHub Actions"
            sudo git push
            echo "Changes committed and pushed successfully!"
          else
            echo "No pdf changes to commit."
          fi

          cd ../../exports/epub
          if [[ -n $(git status --porcelain) ]]; then
            sudo git add -A
            sudo git commit -m "Automated commit by GitHub Actions"
            sudo git push
            echo "Changes committed and pushed successfully!"
          else
            echo "No epub changes to commit."
          fi

